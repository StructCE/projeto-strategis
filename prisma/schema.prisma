// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id       String     @id @default(cuid())
    name     String
    email    String     @unique
    phone    String
    accounts Account[]
    sessions Session[]
    UserRole UserRole[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Company {
    id                 String  @id @default(cuid())
    name               String
    email              String
    cnpj               String
    type               String
    headquarters       String?
    phone              String
    stateRegistration  String
    taxRegime          String
    address            String
    city               String
    neighborhood       String
    federativeUnit     String
    cep                String
    legalResponsibleId String?

    legaResponsible UserRole?  @relation("CompanyResponsible", fields: [legalResponsibleId], references: [id])
    UserRole        UserRole[] @relation("CompanyEmployees")
    Stock           Stock[]
    Contact         Contact[]
}

model UserRole {
    id        String @id @default(cuid())
    userId    String
    companyId String
    roleId    String

    user                       User        @relation(fields: [userId], references: [id])
    company                    Company     @relation("CompanyEmployees", fields: [companyId], references: [id])
    role                       Role        @relation(fields: [roleId], references: [id])
    CompanyResponsible         Company[]   @relation("CompanyResponsible")
    StockResponsible           Stock[]     @relation("StockResponsible")
    EntryResponsible           Entry[]     @relation("EntryResponsible")
    OutputResponsible          Output[]    @relation("OutputResponsible")
    OutputApplicant            Output[]    @relation("OutputApplicant")
    AdjustResponsible          Adjust[]    @relation("AdjustResponsible")
    OrderResponsible           Order[]     @relation("OrderResponsible")
    RequestResponsible         Request[]   @relation("RequestResponsible")
    RequestDeliveryResponsible Request[]   @relation("StatusResponsible")
    Inventory                  Inventory[]
    Request                    Request[]
}

model Role {
    id         String       @id @default(cuid())
    name       String
    UserRole   UserRole[]
    RoleModule RoleModule[]
}

model RoleModule {
    id         String @id @default(cuid())
    moduleCode Int
    roleId     String

    module Module @relation(fields: [moduleCode], references: [code])
    role   Role   @relation(fields: [roleId], references: [id])
}

model Module {
    id            String       @id @default(cuid())
    name          String
    code          Int          @unique
    pagePath      String
    allowedRouter String
    RoleModule    RoleModule[]
}

model Supplier {
    id                String            @id @default(cuid())
    name              String
    cnpj              String
    email             String
    phone             String
    stateRegistration String
    address           String
    neighborhood      String
    city              String
    federativeUnit    String
    cep               String
    Contact           Contact[]
    ProductSupplier   ProductSupplier[]
    ProductEntry      ProductEntry[]
    ProductOutput     ProductOutput[]
    OrderProduct      OrderProduct[]
    Invoice           Invoice[]
}

model Contact {
    id         String @id @default(cuid())
    name       String
    email      String
    phone      String
    supplierId String
    companyId  String

    company  Company  @relation(fields: [companyId], references: [id])
    supplier Supplier @relation(fields: [supplierId], references: [id])
}

model Product {
    id               String   @id @default(cuid())
    name             String
    status           String
    buyQuantity      Float
    buyDate          DateTime
    currentStock     Float
    currentInventory Float
    minimunStock     Int
    maximumStock     Int
    unitId           String
    controlTypeId    String
    categoryId       String
    sectorOfUseId    String
    stockId          String
    shelfId          String
    cabinetId        String

    unit             Unit               @relation(fields: [unitId], references: [id])
    controlType      ControlType        @relation(fields: [controlTypeId], references: [id])
    category         ProductCategory    @relation(fields: [categoryId], references: [id])
    sectorOfUse      UseSector          @relation(fields: [sectorOfUseId], references: [id])
    stock            Stock              @relation(fields: [stockId], references: [id])
    shelf            CabinetShelf       @relation(fields: [shelfId], references: [id])
    cabinet          StockCabinet       @relation(fields: [cabinetId], references: [id])
    ProductSupplier  ProductSupplier[]
    ProductEntry     ProductEntry[]
    ProductOutput    ProductOutput[]
    ProductAdjust    ProductAdjust[]
    RequestProduct   RequestProduct[]
    ProductInventory ProductInventory[]
}

model ProductSupplier {
    id         String @id @default(cuid())
    value      Float
    productId  String
    supplierId String

    product  Product  @relation(fields: [productId], references: [id])
    supplier Supplier @relation(fields: [supplierId], references: [id])
}

model Stock {
    id                 String @id @default(cuid())
    name               String
    companyId          String
    legalResponsibleId String

    company          Company        @relation(fields: [companyId], references: [id])
    legalResponsible UserRole       @relation("StockResponsible", fields: [legalResponsibleId], references: [id])
    Product          Product[]
    StockCabinet     StockCabinet[]
    Adjust           Adjust[]
    Order            Order[]
}

model Unit {
    id           String @id @default(cuid())
    name         String
    abbreviation String
    unitsPerPack Float

    Product        Product[]
    RequestProduct RequestProduct[]
    OrderProduct   OrderProduct[]
    ProductEntry   ProductEntry[]
}

model Cabinet {
    id           String         @id @default(cuid())
    name         String
    StockCabinet StockCabinet[]
}

model StockCabinet {
    id        String @id @default(cuid())
    cabinetId String
    stockId   String

    cabinet      Cabinet        @relation(fields: [cabinetId], references: [id])
    stock        Stock          @relation(fields: [stockId], references: [id])
    CabinetShelf CabinetShelf[]
    Product      Product[]
}

model Shelf {
    id   String @id @default(cuid())
    name String

    CabinetShelf CabinetShelf[]
}

model CabinetShelf {
    id        String @id @default(cuid())
    shelfId   String
    cabinetId String

    shelf   Shelf        @relation(fields: [shelfId], references: [id])
    cabinet StockCabinet @relation(fields: [cabinetId], references: [id])
    Product Product[]
}

model ControlType {
    id      String    @id @default(cuid())
    name    String
    Product Product[]
}

model ProductCategory {
    id      String    @id @default(cuid())
    name    String
    Product Product[]
}

model UseSector {
    id   String @id @default(cuid())
    name String

    Product Product[]
}

model Entry {
    id            String   @id @default(cuid())
    invoice       String
    date          DateTime
    responsibleId String
    operationId   String
    type          String   @default("Em Aberto")
    status        String   @default("Em Dia")

    responsible  UserRole       @relation("EntryResponsible", fields: [responsibleId], references: [id])
    ProductEntry ProductEntry[]
}

model Invoice {
    id             String   @id @default(cuid())
    documentNumber String
    documentDate   DateTime
    expenseType    String
    installment    String
    deadlineDate   DateTime
    status         String
    groupId        String?
    documentTypeId String?
    accountPlanId  String?
    projectId      String?
    supplierId     String

    group        Group?           @relation(fields: [groupId], references: [id])
    documentType DocumentType?    @relation(fields: [documentTypeId], references: [id])
    accountPlan  BankAccountPlan? @relation(fields: [accountPlanId], references: [id])
    project      Project?         @relation(fields: [projectId], references: [id])
    supplier     Supplier         @relation(fields: [supplierId], references: [id])
}

model Output {
    id            String   @id @default(cuid())
    number        Int
    date          DateTime
    responsibleId String
    applicantId   String
    requestArea   String
    operationId   String

    responsible UserRole @relation("OutputResponsible", fields: [responsibleId], references: [id])
    applicant   UserRole @relation("OutputApplicant", fields: [applicantId], references: [id])

    ProductOutput ProductOutput[]
}

model ProductEntry {
    id               String @id @default(cuid())
    ncm              Int
    cfop             Int
    unitId           String
    entryId          String
    productId        String
    supplierId       String
    quantity         Int
    purchaseQuantity Int
    unitValue        Float

    entry    Entry    @relation(fields: [entryId], references: [id])
    product  Product  @relation(fields: [productId], references: [id])
    supplier Supplier @relation(fields: [supplierId], references: [id])
    unit     Unit     @relation(fields: [unitId], references: [id])
}

model ProductOutput {
    id         String @id @default(cuid())
    outputId   String
    productId  String
    supplierId String
    quantity   Int

    output   Output   @relation(fields: [outputId], references: [id])
    product  Product  @relation(fields: [productId], references: [id])
    supplier Supplier @relation(fields: [supplierId], references: [id])
}

model Inventory {
    id            String   @id @default(cuid())
    name          String
    date          DateTime
    responsibleId String

    responsible      UserRole           @relation(fields: [responsibleId], references: [id])
    ProductInventory ProductInventory[]
}

model ProductInventory {
    id                String @id @default(cuid())
    inventoryQuantity Float
    stockQuantity     Float
    productId         String
    inventoryId       String

    product   Product   @relation(fields: [productId], references: [id])
    inventory Inventory @relation(fields: [inventoryId], references: [id])
}

model Adjust {
    id            String   @id @default(cuid())
    stockId       String
    name          String
    date          DateTime
    type          String
    responsibleId String

    stock         Stock           @relation(fields: [stockId], references: [id])
    responsible   UserRole        @relation("AdjustResponsible", fields: [responsibleId], references: [id])
    ProductAdjust ProductAdjust[]
}

model ProductAdjust {
    id            String @id @default(cuid())
    oldStock      Int
    adjustedStock Int
    productId     String
    adjustId      String
    reasonId      String

    adjust  Adjust       @relation(fields: [adjustId], references: [id])
    product Product      @relation(fields: [productId], references: [id])
    reason  AdjustReason @relation(fields: [reasonId], references: [id])
}

model AdjustReason {
    id         String @id @default(cuid())
    reasonName String

    ProductAdjust ProductAdjust[]
}

model Order {
    id            String   @id @default(cuid())
    date          DateTime
    responsibleId String
    stockId       String

    responsible  UserRole       @relation("OrderResponsible", fields: [responsibleId], references: [id])
    stock        Stock          @relation(fields: [stockId], references: [id])
    OrderProduct OrderProduct[]
}

model OrderProduct {
    id          String @id @default(cuid())
    orderId     String
    buyQuantity Int
    unitId      String
    supplierId  String

    order    Order    @relation(fields: [orderId], references: [id])
    supplier Supplier @relation(fields: [supplierId], references: [id])
    unit     Unit     @relation(fields: [unitId], references: [id])
}

model Request {
    id                  String    @id @default(cuid())
    description         String
    requestDate         DateTime
    statusDescription   String?
    statusDate          DateTime?
    statusResponsibleId String
    responsibleId       String
    status              String
    stockId             String

    responsible       UserRole         @relation("RequestResponsible", fields: [responsibleId], references: [id])
    statusResponsible UserRole         @relation("StatusResponsible", fields: [statusResponsibleId], references: [id])
    RequestProduct    RequestProduct[]

    UserRole   UserRole? @relation(fields: [userRoleId], references: [id])
    userRoleId String?
}

model RequestProduct {
    id                String @id @default(cuid())
    requestedQuantity Int
    releasedQuantity  Int
    requestId         String
    productId         String
    unitId            String

    request Request @relation(fields: [requestId], references: [id])
    product Product @relation(fields: [productId], references: [id])
    unit    Unit    @relation(fields: [unitId], references: [id])
}

model Operation {
    id          String   @id @default(cuid())
    date        DateTime
    description String

    userRoleId String?
}

model Bank {
    id   String @id @default(cuid())
    name String
}

model BankAccount {
    id   String @id @default(cuid())
    name String
}

model BankAccountPlan {
    id      String    @id @default(cuid())
    name    String
    Invoice Invoice[]
}

model DocumentType {
    id      String    @id @default(cuid())
    name    String
    Invoice Invoice[]
}

model Project {
    id      String    @id @default(cuid())
    name    String
    Invoice Invoice[]
}

model Group {
    id      String    @id @default(cuid())
    name    String
    Invoice Invoice[]
}

model Payment {
    id          String   @id @default(cuid())
    invoiceId   String
    bankId      String
    payedValue  String
    paymentDate DateTime
    payedStatus String
}
