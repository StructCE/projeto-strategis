// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id       String     @id @default(cuid())
    name     String
    email    String     @unique
    phone    String
    accounts Account[]
    sessions Session[]
    UserRole UserRole[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Company {
    id                 String @id @default(cuid())
    name               String
    cnpj               String
    type               String
    headquarters       String
    phone              String
    stateRegistration  String
    taxRegime          String
    address            String
    neighborhood       String
    federativeUnit     String
    cep                String
    legalResponsibleId String
    filesAddress       String

    legaResponsible UserRole    @relation("CompanyResponsible", fields: [legalResponsibleId], references: [id])
    UserRole        UserRole[]  @relation("CompanyEmployees")
    Stock           Stock[]
    Operation       Operation[]
    userId          String?
}

model UserRole {
    id         String  @id @default(cuid())
    userId     String
    supplierId String?
    companyId  String
    roleId     String

    user                       User        @relation(fields: [userId], references: [id])
    supplier                   Supplier?   @relation(fields: [supplierId], references: [id])
    company                    Company     @relation("CompanyEmployees", fields: [companyId], references: [id])
    role                       Role        @relation(fields: [roleId], references: [id])
    CompanyResponsible         Company[]   @relation("CompanyResponsible")
    StockResponsible           Stock[]     @relation("StockResponsible")
    EntryResponsible           Entry[]     @relation("EntryResponsible")
    OutputResponsible          Output[]    @relation("OutputResponsible")
    OutputApplicant            Output[]    @relation("OutputApplicant")
    AdjustResponsible          Adjust[]    @relation("AdjustResponsible")
    OrderResponsible           Order[]     @relation("OrderResponsible")
    RequestResponsible         Request[]   @relation("RequestResponsible")
    RequestDeliveryResponsible Request[]   @relation("RequestDeliveryResponsible")
    OperationResponsible       Operation[] @relation("OperationOperator")
}

model Role {
    id         String       @id @default(cuid())
    name       String
    UserRole   UserRole[]
    RoleModule RoleModule[]
}

model RoleModule {
    id       String @id @default(cuid())
    moduleId String
    roleId   String

    module Module @relation(fields: [moduleId], references: [id])
    role   Role   @relation(fields: [roleId], references: [id])
}

model Module {
    id         String       @id @default(cuid())
    operation  String
    RoleModule RoleModule[]
}

model Supplier {
    id                String            @id @default(cuid())
    name              String
    cnpj              String
    email             String
    phone             String
    stateRegistration String
    address           String
    neighborhood      String
    city              String
    federativeUnit    String
    cep               String
    UserRole          UserRole[]
    ProductSupplier   ProductSupplier[]
    ProductEntry      ProductEntry[]
    ProductOutput     ProductOutput[]
    Inventory         Inventory[]
    OrderProduct      OrderProduct[]
}

model Product {
    id               String   @id @default(cuid())
    name             String
    status           String
    buyQuantity      Float
    buyUnit          String
    buyDate          DateTime
    currentStock     Int
    currentInventory Int
    minimunStock     Int
    maximumStock     Int
    controlTypeId    String
    categoryId       String
    sectorOfUseId    String
    stockId          String
    shelfId          String
    cabinetId        String

    controlType     ControlType       @relation(fields: [controlTypeId], references: [id])
    category        ProductCategory   @relation(fields: [categoryId], references: [id])
    sectorOfUse     UseSector         @relation(fields: [sectorOfUseId], references: [id])
    stock           Stock             @relation(fields: [stockId], references: [id])
    shelf           Shelf             @relation(fields: [shelfId], references: [id])
    cabinet         Cabinet           @relation(fields: [cabinetId], references: [id])
    ProductSupplier ProductSupplier[]
    ProductEntry    ProductEntry[]
    ProductOutput   ProductOutput[]
    Inventory       Inventory[]
    ProductAdjust   ProductAdjust[]
    RequestProduct  RequestProduct[]
}

model ProductSupplier {
    id         String @id @default(cuid())
    productId  String
    supplierId String

    product  Product  @relation(fields: [productId], references: [id])
    supplier Supplier @relation(fields: [supplierId], references: [id])
}

model Stock {
    id                 String @id @default(cuid())
    name               String
    companyId          String
    legalResponsibleId String

    company          Company        @relation(fields: [companyId], references: [id])
    legalResponsible UserRole       @relation("StockResponsible", fields: [legalResponsibleId], references: [id])
    Product          Product[]
    StockCabinet     StockCabinet[]
    StockShelf       StockShelf[]
    Adjust           Adjust[]
    Order            Order[]
    userId           String?
}

model Cabinet {
    id           String         @id @default(cuid())
    name         String
    Product      Product[]
    StockCabinet StockCabinet[]
}

model StockCabinet {
    id        String @id @default(cuid())
    cabinetId String
    stockId   String

    cabinet Cabinet @relation(fields: [cabinetId], references: [id])
    stock   Stock   @relation(fields: [stockId], references: [id])
}

model Shelf {
    id         String       @id @default(cuid())
    name       String
    Product    Product[]
    StockShelf StockShelf[]
}

model StockShelf {
    id      String @id @default(cuid())
    shelfId String
    stockId String

    shelf Shelf @relation(fields: [shelfId], references: [id])
    stock Stock @relation(fields: [stockId], references: [id])
}

model ControlType {
    id      String    @id @default(cuid())
    name    String
    Product Product[]
}

model ProductCategory {
    id      String    @id @default(cuid())
    name    String
    Product Product[]
}

model UseSector {
    id   String @id @default(cuid())
    name String

    Product Product[]
}

model Entry {
    id            String   @id @default(cuid())
    invoice       String
    date          DateTime
    responsibleId String
    operationId   String
    type          String   @default("Em Aberto")
    status        String   @default("Em Dia")

    responsible  UserRole       @relation("EntryResponsible", fields: [responsibleId], references: [id])
    operation    Operation      @relation(fields: [operationId], references: [id])
    ProductEntry ProductEntry[]
}

model Output {
    id            String   @id @default(cuid())
    number        Int
    date          DateTime
    responsibleId String
    applicantId   String
    requestArea   String
    operationId   String

    responsible UserRole  @relation("OutputResponsible", fields: [responsibleId], references: [id])
    applicant   UserRole  @relation("OutputApplicant", fields: [applicantId], references: [id])
    operation   Operation @relation(fields: [operationId], references: [id])

    ProductOutput ProductOutput[]
    Inventory     Inventory[]
}

model ProductEntry {
    id         String @id @default(cuid())
    entryId    String
    productId  String
    supplierId String
    quantity   Int

    entry    Entry    @relation(fields: [entryId], references: [id])
    product  Product  @relation(fields: [productId], references: [id])
    supplier Supplier @relation(fields: [supplierId], references: [id])
}

model ProductOutput {
    id         String @id @default(cuid())
    outputId   String
    productId  String
    supplierId String
    quantity   Int

    output   Output   @relation(fields: [outputId], references: [id])
    product  Product  @relation(fields: [productId], references: [id])
    supplier Supplier @relation(fields: [supplierId], references: [id])
}

model Inventory {
    id          String @id @default(cuid())
    outputId    String
    productId   String
    supplierId  String
    quantity    Int
    operationId String

    output    Output    @relation(fields: [outputId], references: [id])
    product   Product   @relation(fields: [productId], references: [id])
    supplier  Supplier  @relation(fields: [supplierId], references: [id])
    operation Operation @relation(fields: [operationId], references: [id])
}

model Adjust {
    id            String @id @default(cuid())
    stockId       String
    name          String
    responsibleId String
    type          String
    operationId   String

    stock       Stock     @relation(fields: [stockId], references: [id])
    responsible UserRole  @relation("AdjustResponsible", fields: [responsibleId], references: [id])
    operation   Operation @relation(fields: [operationId], references: [id])
}

model ProductAdjust {
    id            String @id @default(cuid())
    oldStock      Int
    adjustedStock Int
    description   String
    productId     String

    product Product @relation(fields: [productId], references: [id])
}

model Order {
    id            String   @id @default(cuid())
    date          DateTime
    responsibleId String
    stockId       String

    responsible  UserRole       @relation("OrderResponsible", fields: [responsibleId], references: [id])
    stock        Stock          @relation(fields: [stockId], references: [id])
    OrderProduct OrderProduct[]
}

model OrderProduct {
    id          String @id @default(cuid())
    orderId     String
    unitType    String
    buyQuantity Int
    supplierId  String

    order    Order    @relation(fields: [orderId], references: [id])
    supplier Supplier @relation(fields: [supplierId], references: [id])
}

model Request {
    id                    String   @id @default(cuid())
    requestDate           DateTime
    responsibleId         String
    deliveryDate          DateTime
    deliveryResponsibleId String
    status                String
    stockId               String

    responsible         UserRole         @relation("RequestResponsible", fields: [responsibleId], references: [id])
    deliveryResponsible UserRole         @relation("RequestDeliveryResponsible", fields: [deliveryResponsibleId], references: [id])
    RequestProduct      RequestProduct[]
}

model RequestProduct {
    id        String @id @default(cuid())
    requestId String
    productId String
    unitType  String
    quantity  Int

    request Request @relation(fields: [requestId], references: [id])
    product Product @relation(fields: [productId], references: [id])
}

model Operation {
    id          String   @id @default(cuid())
    date        DateTime
    companyId   String
    operatorId  String
    description String

    company   Company     @relation(fields: [companyId], references: [id])
    operator  UserRole    @relation("OperationOperator", fields: [operatorId], references: [id])
    Entry     Entry[]
    Output    Output[]
    Inventory Inventory[]
    Adjust    Adjust[]
}
