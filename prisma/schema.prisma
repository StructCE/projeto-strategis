// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id               String    @id @default(cuid())
    nome             String?
    email            String?   @unique
    emailConfirmacao DateTime? @map("email_verified")
    senha            String
    senhaConfirmacao String
    telefone         String?
    image            String?
    accounts         Account[]
    sessions         Session[]
    cargo            Cargo     @relation(fields: [cargoId], references: [id])
    cargoId          Int

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Cargo {
    id      Int           @id @default(autoincrement())
    nome    String
    modulos ModuloCargo[]
    users   User[]
}

model Modulo {
    id       Int           @id @default(autoincrement())
    operacao String
    cargos   ModuloCargo[]
}

model ModuloCargo {
    cargoId  Int
    moduloId Int
    cargo    Cargo  @relation(fields: [cargoId], references: [id])
    modulo   Modulo @relation(fields: [moduloId], references: [id])

    @@id([cargoId, moduloId]) // Chave composta
}
