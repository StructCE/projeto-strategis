// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id                 String              @id @default(cuid())
    name               String
    email              String              @unique
    phone              String
    accounts           Account[]
    sessions           Session[]
    UserRole           UserRole[]
    productPermissions ProductPermission[]
    Company            Company[]           @relation("CompanyResponsible")

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Company {
    id                 String  @id @default(cuid())
    name               String
    email              String?
    cnpj               String  @unique
    type               String?
    headquarters       String?
    phone              String
    stateRegistration  String
    taxRegime          String?
    address            String
    city               String
    neighborhood       String
    federativeUnit     String
    cep                String
    legalResponsibleId String?

    legalResponsible User?             @relation("CompanyResponsible", fields: [legalResponsibleId], references: [id])
    UserRole         UserRole[]        @relation("CompanyEmployees")
    Stock            Stock[]
    Invoice          Invoice[]
    CompanySupplier  CompanySupplier[]
}

model UserRole {
    id        String @id @default(cuid())
    userId    String
    companyId String
    roleId    String

    user                       User        @relation(fields: [userId], references: [id])
    company                    Company     @relation("CompanyEmployees", fields: [companyId], references: [id])
    role                       Role        @relation(fields: [roleId], references: [id])
    StockResponsible           Stock[]     @relation("StockResponsible")
    OutputResponsible          Output[]    @relation("OutputResponsible")
    OutputApplicant            Output[]    @relation("OutputApplicant")
    AdjustResponsible          Adjust[]    @relation("AdjustResponsible")
    OrderResponsible           Order[]     @relation("OrderResponsible")
    RequestResponsible         Request[]   @relation("RequestResponsible")
    RequestDeliveryResponsible Request[]   @relation("StatusResponsible")
    Inventory                  Inventory[]
    Operation                  Operation[]
}

model Role {
    id         String       @id @default(cuid())
    name       String
    UserRole   UserRole[]
    RoleModule RoleModule[]
}

model RoleModule {
    id         String @id @default(cuid())
    moduleCode Int
    roleId     String

    module Module @relation(fields: [moduleCode], references: [code])
    role   Role   @relation(fields: [roleId], references: [id])
}

model Module {
    id            String       @id @default(cuid())
    name          String
    code          Int          @unique
    pagePath      String
    allowedRouter String
    RoleModule    RoleModule[]
}

model Supplier {
    id                String            @id @default(cuid())
    name              String
    cnpj              String            @unique
    email             String?
    phone             String?
    stateRegistration String
    address           String
    neighborhood      String
    city              String
    federativeUnit    String
    cep               String
    ProductSupplier   ProductSupplier[]
    ProductOutput     ProductOutput[]
    CompanySupplier   CompanySupplier[]
    Invoice           Invoice[]
}

model CompanySupplier {
    id         String @id @default(cuid())
    companyId  String
    supplierId String

    company  Company  @relation(fields: [companyId], references: [id])
    supplier Supplier @relation(fields: [supplierId], references: [id])
}

model Product {
    id            String  @id @default(cuid())
    code          String
    name          String
    ncm           Int
    cfop          Int
    status        String?
    buyQuantity   Float?
    buyDay        String?
    currentStock  Float?
    minimunStock  Int?
    maximumStock  Int?
    lastInventory Float?

    unitId          String
    controlTypeId   String?
    categoryId      String?
    sectorOfUseId   String?
    shelfId         String?
    parentProductId String?

    usersWithPermission ProductPermission[]

    parentProduct Product?         @relation("ProductToParent", fields: [parentProductId], references: [id])
    unit          Unit             @relation(fields: [unitId], references: [id])
    controlType   ControlType?     @relation(fields: [controlTypeId], references: [id])
    category      ProductCategory? @relation(fields: [categoryId], references: [id])
    sectorOfUse   UseSector?       @relation(fields: [sectorOfUseId], references: [id])
    shelf         Shelf?           @relation(fields: [shelfId], references: [id], onDelete: Cascade)

    childProducts    Product[]          @relation("ProductToParent")
    ProductSupplier  ProductSupplier[]
    ProductOutput    ProductOutput[]
    ProductAdjust    ProductAdjust[]
    RequestProduct   RequestProduct[]
    ProductInventory ProductInventory[]
}

model ProductPermission {
    id        String @id @default(cuid())
    userId    String
    productId String

    user    User    @relation(fields: [userId], references: [id])
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductSupplier {
    id         String @id @default(cuid())
    value      Float?
    productId  String
    supplierId String

    product        Product          @relation(fields: [productId], references: [id])
    supplier       Supplier         @relation(fields: [supplierId], references: [id])
    OrderProduct   OrderProduct[]
    InvoiceProduct InvoiceProduct[]
}

model Stock {
    id                 String @id @default(cuid())
    name               String
    companyId          String
    legalResponsibleId String

    company          Company        @relation(fields: [companyId], references: [id])
    legalResponsible UserRole       @relation("StockResponsible", fields: [legalResponsibleId], references: [id])
    StockCabinet     StockCabinet[] // Relação com StockCabinet para associar cabinets ao estoque
    Adjust           Adjust[]
    Inventory        Inventory[]
    // Order            Order[]
}

model Unit {
    id           String @id @default(cuid())
    name         String
    abbreviation String
    unitsPerPack Float

    Product Product[]
    // InvoiceProduct InvoiceProduct[]
    // RequestProduct RequestProduct[]
}

model Cabinet {
    id   String @id @default(cuid())
    name String

    StockCabinet StockCabinet[] // Relação com StockCabinet para associar com estoques
    Shelf        Shelf[] // Relação direta com Shelf para adicionar prateleiras ao cabinet
}

model StockCabinet {
    id        String @id @default(cuid())
    stockId   String
    cabinetId String

    stock   Stock   @relation(fields: [stockId], references: [id], onDelete: Cascade) // O estoque pode remover a relação
    cabinet Cabinet @relation(fields: [cabinetId], references: [id], onDelete: Cascade) // O cabinet pode remover a relação
    // Product Product[]
}

model Shelf {
    id        String @id @default(cuid())
    name      String
    cabinetId String // Relacionamento direto com o Cabinet

    cabinet Cabinet   @relation(fields: [cabinetId], references: [id], onDelete: Cascade) // Shelf associada a um Cabinet
    Product Product[]
}

model ControlType {
    id      String    @id @default(cuid())
    name    String
    Product Product[]
}

model ProductCategory {
    id      String    @id @default(cuid())
    name    String
    Product Product[]
}

model UseSector {
    id   String @id @default(cuid())
    name String

    Product Product[]
}

model Output {
    id            String   @id @default(cuid())
    number        Int
    date          DateTime
    responsibleId String
    applicantId   String
    requestArea   String
    operationId   String

    responsible UserRole @relation("OutputResponsible", fields: [responsibleId], references: [id])
    applicant   UserRole @relation("OutputApplicant", fields: [applicantId], references: [id])

    ProductOutput ProductOutput[]
}

model ProductOutput {
    id         String @id @default(cuid())
    outputId   String
    productId  String
    supplierId String
    quantity   Int

    output   Output   @relation(fields: [outputId], references: [id])
    product  Product  @relation(fields: [productId], references: [id])
    supplier Supplier @relation(fields: [supplierId], references: [id])
}

model Inventory {
    id            String   @id @default(cuid())
    stockId       String
    // name          String
    date          DateTime
    status        String
    responsibleId String

    stock            Stock              @relation(fields: [stockId], references: [id])
    responsible      UserRole           @relation(fields: [responsibleId], references: [id])
    ProductInventory ProductInventory[]
}

model ProductInventory {
    id                String @id @default(cuid())
    inventoryQuantity Float
    stockQuantity     Float
    productId         String
    inventoryId       String

    product   Product   @relation(fields: [productId], references: [id])
    inventory Inventory @relation(fields: [inventoryId], references: [id])
}

model Adjust {
    id            String   @id @default(cuid())
    stockId       String
    // name          String
    date          DateTime
    type          String
    responsibleId String

    stock         Stock           @relation(fields: [stockId], references: [id])
    responsible   UserRole        @relation("AdjustResponsible", fields: [responsibleId], references: [id])
    ProductAdjust ProductAdjust[]
}

model ProductAdjust {
    id            String @id @default(cuid())
    oldStock      Int
    adjustedStock Int
    productId     String
    adjustId      String
    reasonId      String

    adjust  Adjust       @relation(fields: [adjustId], references: [id])
    product Product      @relation(fields: [productId], references: [id])
    reason  AdjustReason @relation(fields: [reasonId], references: [id])
}

model AdjustReason {
    id   String @id @default(cuid())
    name String

    ProductAdjust ProductAdjust[]
}

model Order {
    id            String   @id @default(cuid())
    date          DateTime
    responsibleId String
    status        Boolean  @default(false)
    // stockId       String

    responsible  UserRole       @relation("OrderResponsible", fields: [responsibleId], references: [id])
    // stock        Stock          @relation(fields: [stockId], references: [id])
    OrderProduct OrderProduct[]
}

model OrderProduct {
    id                String @id @default(cuid())
    orderId           String
    purchaseQuantity  Float
    productSupplierId String

    order   Order           @relation(fields: [orderId], references: [id])
    product ProductSupplier @relation(fields: [productSupplierId], references: [id])
}

model Request {
    id                  String    @id @default(cuid())
    requestDate         DateTime
    responsibleId       String
    description         String?
    status              String    @default("Esperando Confirmação")
    statusDescription   String?
    statusDate          DateTime?
    statusResponsibleId String?

    responsible       UserRole         @relation("RequestResponsible", fields: [responsibleId], references: [id])
    statusResponsible UserRole?        @relation("StatusResponsible", fields: [statusResponsibleId], references: [id])
    RequestProduct    RequestProduct[]
}

model RequestProduct {
    id                String @id @default(cuid())
    requestedQuantity Int
    releasedQuantity  Int?
    requestId         String
    productId         String
    // unitId            String

    request Request @relation(fields: [requestId], references: [id])
    product Product @relation(fields: [productId], references: [id])
    // unit    Unit    @relation(fields: [unitId], references: [id])
}

model Operation {
    id            String   @id @default(cuid())
    date          DateTime
    description   String
    responsibleId String
    responsible   UserRole @relation(fields: [responsibleId], references: [id])
}

model Bank {
    id      String    @id @default(cuid())
    name    String
    Invoice Invoice[]
}

model InvoiceAccount {
    id            String              @id @default(cuid())
    name          String
    accountPlanId String?
    accountPlan   InvoiceAccountPlan? @relation(fields: [accountPlanId], references: [id])
    Invoice       Invoice[]
}

model InvoiceAccountPlan {
    id           String           @id @default(cuid())
    name         String
    abbreviation String
    accounts     InvoiceAccount[]
}

model DocumentType {
    id      String    @id @default(cuid())
    name    String
    Invoice Invoice[]
}

model Project {
    id      String    @id @default(cuid())
    name    String
    Invoice Invoice[]
}

model Group {
    id      String    @id @default(cuid())
    name    String
    Invoice Invoice[]
}

model Invoice {
    id              String   @id @default(cuid())
    documentNumber  String // Número da nota
    documentDate    DateTime // Data de emissão
    companyId       String // Empresa
    expenseType     String? // "Despesa Fixa" | "Despesa Variável" | "Receita" | undefined;
    recurrence      String? // "Recorrente" | "Avulsa" | "Parcelas" | undefined;
    installment     String // Parcela (Pode ser 'única' ou o numero da parcela incluindo a data ou não)
    deadlineDate    DateTime // Data de vencimento
    confirmedStatus String // "Pendente" | "Confirmada" | "Cancelada"
    accountId       String? // Conta relacionada a um accoutn plan com nome e sigla
    projectId       String? // Projeto
    groupId         String? // Grupo
    documentTypeId  String? // Tipo de documento
    supplierId      String
    invoiceValue    Float

    bankId      String? // Banco do pagamento
    payedValue  Float? // Valor pago
    paymentDate DateTime? // Data do pagamento
    payedStatus String    @default("Em Aberto") // "Pago" | "Em Aberto" | "Cancelado"

    supplier       Supplier         @relation(fields: [supplierId], references: [id])
    company        Company          @relation(fields: [companyId], references: [id])
    group          Group?           @relation(fields: [groupId], references: [id])
    documentType   DocumentType?    @relation(fields: [documentTypeId], references: [id])
    account        InvoiceAccount?  @relation(fields: [accountId], references: [id])
    project        Project?         @relation(fields: [projectId], references: [id])
    InvoiceProduct InvoiceProduct[]
    bank           Bank?            @relation(fields: [bankId], references: [id])
}

model InvoiceProduct {
    id                String @id @default(cuid())
    // ncm               Int
    // cfop              Int
    // unitId            String // Unidade de compra
    purchaseQuantity  Float // Quantidade comprada
    unitValue         Float // Valor por unidade de compra
    invoiceId         String
    productSupplierId String

    // unit            Unit            @relation(fields: [unitId], references: [id])
    productSupplier ProductSupplier @relation(fields: [productSupplierId], references: [id])
    invoice         Invoice         @relation(fields: [invoiceId], references: [id])
}
